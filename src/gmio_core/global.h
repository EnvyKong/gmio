#ifndef GMIO_GLOBAL_H
#define GMIO_GLOBAL_H

#if defined(WIN64) || defined(_WIN64) || defined(__WIN64__) \
    || defined(WIN32) || defined(_WIN32) || defined(__WIN32__) || defined(__NT__)
# define GMIO_DECL_EXPORT __declspec(dllexport)
# define GMIO_DECL_IMPORT __declspec(dllimport)
#else
# define GMIO_DECL_EXPORT
# define GMIO_DECL_IMPORT
#endif /* WIN */

#ifdef GMIO_LIB_DLL
# ifdef GMIO_LIB_MAKE_DLL
#  define GMIO_LIB_EXPORT GMIO_DECL_EXPORT
# else
#  define GMIO_LIB_EXPORT GMIO_DECL_IMPORT
# endif /* GMIO_LIB_MAKE_DLL */
#else
# define GMIO_LIB_EXPORT
#endif /* GMIO_LIB_DLL */

/* "config.h" is generated by cmake, it should reside in the out-of-source build dir.
 * In CMakeFiles.txt, the directory where resides "config.h" is added to the include path list
 */
#include "config.h"

#ifdef GMIO_HAVE_STDINT_H
# include <stdint.h>
#else
typedef char          int8_t;
typedef unsigned char uint8_t;

typedef short          int16_t;
typedef unsigned short uint16_t;

typedef int          int32_t;
typedef unsigned int uint32_t;

/*# ifdef _MSC_VER
typedef __int64 int64_t;
typedef unsigned __int64 uint64_t;
# else
typedef long long int64_t;
typedef unsigned long long uint64_t;
# endif*/ /* _MSC_VER */

#endif /* GMIO_USE_STDINT_H */

#ifdef GMIO_HAVE_STDBOOL_H
# include <stdbool.h>

/*! Typedef for boolean type */
typedef bool gmio_bool_t;

#define GMIO_FALSE false
#define GMIO_TRUE  true

#else
/*! Typedef for boolean type */
typedef int    gmio_bool_t;

/*! This enum defines true/false boolean values */
enum gmio_bool_value
{
  GMIO_FALSE = 0,
  GMIO_TRUE = 1
};

#endif /* GMIO_HAVE_STDBOOL_H */

/*! Typedef for 32bit real type (float) */
typedef float  gmio_real32_t;

/*! Typedef for 64bit real type (double) */
typedef double gmio_real64_t;

/*! Tells the compiler that a parameter is not used in the body of a function */
#define GMIO_UNUSED(x) (void)x;

#ifndef GMIO_INLINE
# if defined(__GNUC__)
#  define GMIO_INLINE __inline__  /* Compatible with C90 */
# elif defined(_MSC_VER)
#  define GMIO_INLINE __inline
# else
#  define GMIO_INLINE
# endif
#endif /* !GMIO_INLINE */

#ifdef __cplusplus
# define GMIO_C_LINKAGE_BEGIN extern "C" {
# define GMIO_C_LINKAGE_END   }
#else
# define GMIO_C_LINKAGE_BEGIN
# define GMIO_C_LINKAGE_END
#endif /* __cplusplus */

#endif /* GMIO_GLOBAL_H */
